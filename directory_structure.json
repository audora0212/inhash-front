{
    "app": {
        "__files__": {
            "layout.tsx": "import type React from \"react\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { AuthProvider } from \"../context/AuthContext\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata = {\n  title: \"INHASH\",\n  description: \"소프트웨어 관련 취업 정보 및 커뮤니티 플랫폼\",  \n  icons: {\n    icon: '/logo.png',\n  },\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"ko\" suppressHydrationWarning>\n      <body className={inter.className}>\n        <ThemeProvider attribute=\"class\" defaultTheme=\"system\" enableSystem disableTransitionOnChange>\n          <AuthProvider>\n            <div className=\"flex min-h-screen flex-col\">\n              <Header />\n              <main className=\"flex-1\">{children}</main>\n              <Footer />\n            </div>\n          </AuthProvider>\n        </ThemeProvider>\n      </body>\n    </html>\n  );\n}\n",
            "page.tsx": "import Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { CalendarDays, GraduationCap, Briefcase, Award, Users, ExternalLink } from \"lucide-react\"\n\nexport default function Home() {\n  return (\n    <div className=\"flex flex-col gap-8 py-8\">\n      {/* Hero Section */}\n      <section className=\"w-full py-12 md:py-24 lg:py-32 bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-950 dark:to-blue-900\">\n        <div className=\"container px-4 md:px-6\">\n          <div className=\"flex flex-col items-center gap-4 text-center\">\n            <h1 className=\"text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl bg-gradient-to-r from-blue-600 to-cyan-500 bg-clip-text text-transparent\">\n              소프트웨어 취업 정보 커뮤니티\n            </h1>\n            <p className=\"max-w-[700px] text-slate-700 dark:text-slate-300 md:text-xl\">\n              소프트웨어 관련 취업 정보, 공지사항, 공모전, 인턴십 정보를 한 곳에서 확인하세요.\n            </p>\n            <div className=\"flex flex-wrap justify-center gap-4\">\n              <Button\n                className=\"bg-gradient-to-r from-blue-600 to-cyan-500 hover:from-blue-700 hover:to-cyan-600 text-white border-0\"\n                asChild\n              >\n                <Link href=\"/notices\">공지사항 보기</Link>\n              </Button>\n              <Button\n                variant=\"outline\"\n                className=\"border-blue-300 dark:border-blue-700 hover:bg-blue-50 dark:hover:bg-blue-900\"\n                asChild\n              >\n                <Link href=\"/community\">커뮤니티 참여하기</Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"container px-4 md:px-6 py-8 md:py-12\">\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          <Card className=\"gradient-card\">\n            <CardHeader className=\"flex flex-row items-center gap-4\">\n              <GraduationCap className=\"h-8 w-8 feature-icon\" />\n              <div>\n                <CardTitle>학교 공지사항</CardTitle>\n                <CardDescription>SW중심사업단의 최신 공지사항</CardDescription>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p>SW중심사업단에서 제공하는 최신 공지사항과 이벤트 정보를 확인하세요.</p>\n            </CardContent>\n            <CardFooter>\n              <Button variant=\"outline\" asChild className=\"w-full\">\n                <Link href=\"/notices\">더 알아보기</Link>\n              </Button>\n            </CardFooter>\n          </Card>\n          <Card className=\"gradient-card\">\n            <CardHeader className=\"flex flex-row items-center gap-4\">\n              <Award className=\"h-8 w-8 feature-icon\" />\n              <div>\n                <CardTitle>공모전 정보</CardTitle>\n                <CardDescription>IT 관련 공모전 사이트 모음</CardDescription>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p>다양한 IT 공모전 정보를 한 곳에서 확인하고 참여 기회를 얻으세요.</p>\n            </CardContent>\n            <CardFooter>\n              <Button variant=\"outline\" asChild className=\"w-full\">\n                <Link href=\"/contests\">더 알아보기</Link>\n              </Button>\n            </CardFooter>\n          </Card>\n          <Card className=\"gradient-card\">\n            <CardHeader className=\"flex flex-row items-center gap-4\">\n              <Briefcase className=\"h-8 w-8 feature-icon\" />\n              <div>\n                <CardTitle>인턴십 정보</CardTitle>\n                <CardDescription>인하대학교 인턴십 프로그램</CardDescription>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p>인하대학교에서 제공하는 다양한 인턴십 프로그램 정보를 확인하세요.</p>\n            </CardContent>\n            <CardFooter>\n              <Button variant=\"outline\" asChild className=\"w-full\">\n                <Link href=\"/internships\">더 알아보기</Link>\n              </Button>\n            </CardFooter>\n          </Card>\n          <Card className=\"gradient-card\">\n            <CardHeader className=\"flex flex-row items-center gap-4\">\n              <Users className=\"h-8 w-8 feature-icon\" />\n              <div>\n                <CardTitle>SW 커뮤니티</CardTitle>\n                <CardDescription>학생들을 위한 소통 공간</CardDescription>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p>소프트웨어 관련 정보를 공유하고 질문하는 커뮤니티에 참여하세요.</p>\n            </CardContent>\n            <CardFooter>\n              <Button variant=\"outline\" asChild className=\"w-full\">\n                <Link href=\"/community\">더 알아보기</Link>\n              </Button>\n            </CardFooter>\n          </Card>\n          <Card className=\"gradient-card\">\n            <CardHeader className=\"flex flex-row items-center gap-4\">\n              <Briefcase className=\"h-8 w-8 feature-icon\" />\n              <div>\n                <CardTitle>채용 공고</CardTitle>\n                <CardDescription>최신 IT 채용 정보</CardDescription>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p>사람인에서 제공하는 최신 IT 채용 정보를 확인하고 지원하세요.</p>\n            </CardContent>\n            <CardFooter>\n              <Button variant=\"outline\" asChild className=\"w-full\">\n                <Link href=\"/jobs\">더 알아보기</Link>\n              </Button>\n            </CardFooter>\n          </Card>\n          <Card className=\"gradient-card\">\n            <CardHeader className=\"flex flex-row items-center gap-4\">\n              <CalendarDays className=\"h-8 w-8 feature-icon\" />\n              <div>\n                <CardTitle>일정 및 이벤트</CardTitle>\n                <CardDescription>주요 일정 및 이벤트 정보</CardDescription>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p>취업 설명회, 워크샵, 세미나 등 주요 일정 및 이벤트 정보를 확인하세요.</p>\n            </CardContent>\n            <CardFooter>\n              <Button variant=\"outline\" asChild className=\"w-full\">\n                <Link href=\"/events\">더 알아보기</Link>\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      </section>\n\n      {/* Latest Information Section */}\n      <section className=\"container px-4 md:px-6 py-8 md:py-12 gradient-bg rounded-lg my-8\">\n        <h2 className=\"text-2xl font-bold tracking-tight mb-6\">최신 정보</h2>\n        <Tabs defaultValue=\"notices\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 md:grid-cols-5\">\n            <TabsTrigger value=\"notices\">공지사항</TabsTrigger>\n            <TabsTrigger value=\"contests\">공모전</TabsTrigger>\n            <TabsTrigger value=\"internships\">인턴십</TabsTrigger>\n            <TabsTrigger value=\"community\">커뮤니티</TabsTrigger>\n            <TabsTrigger value=\"jobs\">채용공고</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"notices\" className=\"mt-6\">\n            <div className=\"grid gap-4\">\n              {[1, 2, 3, 4, 5].map((i) => (\n                <Card key={i} className=\"gradient-card\">\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">2023학년도 SW중심대학 산학프로젝트 참여기업 모집 안내</CardTitle>\n                    <CardDescription>2023-09-{i < 10 ? `0${i}` : i}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      SW중심대학 산학프로젝트에 참여할 기업을 모집합니다. 관심 있는 기업은 신청 바랍니다.\n                    </p>\n                  </CardContent>\n                  <CardFooter>\n                    <Button variant=\"outline\" size=\"sm\" className=\"gap-1\" asChild>\n                      <Link href={`/notices/${i}`}>\n                        자세히 보기\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </Link>\n                    </Button>\n                  </CardFooter>\n                </Card>\n              ))}\n            </div>\n            <div className=\"mt-6 flex justify-center\">\n              <Button variant=\"outline\" asChild>\n                <Link href=\"/notices\">더보기</Link>\n              </Button>\n            </div>\n          </TabsContent>\n          <TabsContent value=\"contests\" className=\"mt-6\">\n            <div className=\"grid gap-4\">\n              {[1, 2, 3].map((i) => (\n                <Card key={i} className=\"gradient-card\">\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">2023 대학생 AI 경진대회</CardTitle>\n                    <CardDescription>마감일: 2023-10-{10 + i}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      인공지능 기술을 활용한 혁신적인 솔루션을 개발하는 대학생 AI 경진대회입니다.\n                    </p>\n                  </CardContent>\n                  <CardFooter>\n                    <Button variant=\"outline\" size=\"sm\" className=\"gap-1\" asChild>\n                      <Link href={`/contests/${i}`}>\n                        자세히 보기\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </Link>\n                    </Button>\n                  </CardFooter>\n                </Card>\n              ))}\n            </div>\n            <div className=\"mt-6 flex justify-center\">\n              <Button variant=\"outline\" asChild>\n                <Link href=\"/contests\">더보기</Link>\n              </Button>\n            </div>\n          </TabsContent>\n          <TabsContent value=\"internships\" className=\"mt-6\">\n            <div className=\"grid gap-4\">\n              {[1, 2, 3].map((i) => (\n                <Card key={i} className=\"gradient-card\">\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">2023 하계 인턴십 프로그램</CardTitle>\n                    <CardDescription>지원마감: 2023-05-{15 + i}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      인하대학교 학생들을 위한 하계 인턴십 프로그램입니다. 다양한 기업에서 실무 경험을 쌓을 수 있습니다.\n                    </p>\n                  </CardContent>\n                  <CardFooter>\n                    <Button variant=\"outline\" size=\"sm\" className=\"gap-1\" asChild>\n                      <Link href={`/internships/${i}`}>\n                        자세히 보기\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </Link>\n                    </Button>\n                  </CardFooter>\n                </Card>\n              ))}\n            </div>\n            <div className=\"mt-6 flex justify-center\">\n              <Button variant=\"outline\" asChild>\n                <Link href=\"/internships\">더보기</Link>\n              </Button>\n            </div>\n          </TabsContent>\n          <TabsContent value=\"community\" className=\"mt-6\">\n            <div className=\"grid gap-4\">\n              {[1, 2, 3].map((i) => (\n                <Card key={i} className=\"gradient-card\">\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">React와 Next.js 스터디 모집합니다</CardTitle>\n                    <CardDescription>\n                      작성자: user{i} | 2023-09-{20 + i}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      React와 Next.js를 함께 공부할 스터디원을 모집합니다. 주 1회 오프라인 모임을 계획하고 있습니다.\n                    </p>\n                  </CardContent>\n                  <CardFooter>\n                    <Button variant=\"outline\" size=\"sm\" className=\"gap-1\" asChild>\n                      <Link href={`/community/${i}`}>\n                        자세히 보기\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </Link>\n                    </Button>\n                  </CardFooter>\n                </Card>\n              ))}\n            </div>\n            <div className=\"mt-6 flex justify-center\">\n              <Button variant=\"outline\" asChild>\n                <Link href=\"/community\">더보기</Link>\n              </Button>\n            </div>\n          </TabsContent>\n          <TabsContent value=\"jobs\" className=\"mt-6\">\n            <div className=\"grid gap-4\">\n              {[1, 2, 3].map((i) => (\n                <Card key={i} className=\"gradient-card\">\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">[네이버] 프론트엔드 개발자 채용</CardTitle>\n                    <CardDescription>마감일: 2023-10-{25 + i}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      네이버에서 프론트엔드 개발자를 채용합니다. React, TypeScript 경험자 우대.\n                    </p>\n                  </CardContent>\n                  <CardFooter>\n                    <Button variant=\"outline\" size=\"sm\" className=\"gap-1\" asChild>\n                      <Link href={`/jobs/${i}`}>\n                        자세히 보기\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </Link>\n                    </Button>\n                  </CardFooter>\n                </Card>\n              ))}\n            </div>\n            <div className=\"mt-6 flex justify-center\">\n              <Button variant=\"outline\" asChild>\n                <Link href=\"/jobs\">더보기</Link>\n              </Button>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </section>\n    </div>\n  )\n}\n\n"
        },
        "admin": {
            "jobs": {
                "__files__": {
                    "loading.tsx": "export default function Loading() {\n  return null\n}\n\n",
                    "page.tsx": "\"use client\"\n\nimport { useState } from \"react\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { Search, Plus, Edit, Trash2 } from \"lucide-react\"\n\n// 실제 구현 시에는 API에서 데이터를 가져옵니다\nconst jobs = Array.from({ length: 10 }).map((_, i) => ({\n  id: i + 1,\n  title: [\"프론트엔드 개발자\", \"백엔드 개발자\", \"풀스택 개발자\", \"모바일 앱 개발자\", \"데이터 엔지니어\"][i % 5],\n  company: [\"네이버\", \"카카오\", \"라인\", \"쿠팡\", \"우아한형제들\"][i % 5],\n  location: [\"서울\", \"경기\", \"부산\", \"대전\", \"제주\"][i % 5],\n  deadline: `2023-${11 + (i % 2)}-${10 + (i % 20)}`,\n  status: [\"활성\", \"마감\"][i % 2],\n}))\n\nexport default function AdminJobsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)\n  const [selectedJobId, setSelectedJobId] = useState<number | null>(null)\n\n  const filteredJobs = jobs.filter(\n    (job) =>\n      job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      job.company.toLowerCase().includes(searchTerm.toLowerCase()),\n  )\n\n  const handleDeleteClick = (id: number) => {\n    setSelectedJobId(id)\n    setDeleteDialogOpen(true)\n  }\n\n  const handleDelete = () => {\n    // 실제 구현 시에는 API를 호출하여 데이터를 삭제합니다\n    console.log(`Deleting job with ID: ${selectedJobId}`)\n    setDeleteDialogOpen(false)\n  }\n\n  return (\n    <div className=\"container py-8\">\n      <Card className=\"gradient-card\">\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>채용 공고 관리</CardTitle>\n          <Button className=\"bg-accent hover:bg-accent/90 text-white\" asChild>\n            <Link href=\"/admin/jobs/new\" className=\"gap-1\">\n              <Plus className=\"h-4 w-4\" />새 공고 등록\n            </Link>\n          </Button>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center gap-2 mb-6\">\n            <Input\n              placeholder=\"제목 또는 회사명으로 검색\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"max-w-sm\"\n            />\n            <Button size=\"icon\" variant=\"outline\">\n              <Search className=\"h-4 w-4\" />\n              <span className=\"sr-only\">검색</span>\n            </Button>\n          </div>\n\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>ID</TableHead>\n                  <TableHead>제목</TableHead>\n                  <TableHead>회사</TableHead>\n                  <TableHead>지역</TableHead>\n                  <TableHead>마감일</TableHead>\n                  <TableHead>상태</TableHead>\n                  <TableHead className=\"text-right\">관리</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredJobs.map((job) => (\n                  <TableRow key={job.id}>\n                    <TableCell>{job.id}</TableCell>\n                    <TableCell>{job.title}</TableCell>\n                    <TableCell>{job.company}</TableCell>\n                    <TableCell>{job.location}</TableCell>\n                    <TableCell>{job.deadline}</TableCell>\n                    <TableCell>\n                      <Badge variant={job.status === \"활성\" ? \"default\" : \"secondary\"}>{job.status}</Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button variant=\"outline\" size=\"icon\" asChild>\n                          <Link href={`/admin/jobs/${job.id}/edit`}>\n                            <Edit className=\"h-4 w-4\" />\n                            <span className=\"sr-only\">수정</span>\n                          </Link>\n                        </Button>\n                        <Button variant=\"outline\" size=\"icon\" onClick={() => handleDeleteClick(job.id)}>\n                          <Trash2 className=\"h-4 w-4\" />\n                          <span className=\"sr-only\">삭제</span>\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>채용 공고 삭제</DialogTitle>\n            <DialogDescription>정말로 이 채용 공고를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.</DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setDeleteDialogOpen(false)}>\n              취소\n            </Button>\n            <Button variant=\"destructive\" onClick={handleDelete}>\n              삭제\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n\n"
                },
                "[id]": {
                    "edit": {
                        "__files__": {
                            "page.tsx": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Label } from \"@/components/ui/label\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\n\nexport default function EditJobPage({ params }: { params: { id: string } }) {\n  const router = useRouter()\n  const jobId = params.id\n\n  // 실제 구현 시에는 API에서 데이터를 가져옵니다\n  const [formData, setFormData] = useState({\n    title: \"프론트엔드 개발자\",\n    company: \"네이버\",\n    location: \"서울\",\n    experience: \"신입\",\n    employmentType: \"정규직\",\n    deadline: \"2023-12-31\",\n    description: \"프론트엔드 개발자를 모집합니다. React, TypeScript 경험자 우대.\",\n    requirements: \"- React, TypeScript 경험\\n- 웹 개발 경험 1년 이상\\n- 팀 협업 능력\",\n    benefits: \"- 유연근무제\\n- 식대 지원\\n- 교통비 지원\",\n    skills: [\"React\", \"TypeScript\", \"Next.js\"],\n    isActive: true,\n  })\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target\n    setFormData((prev) => ({ ...prev, [name]: value }))\n  }\n\n  const handleSelectChange = (name: string, value: string) => {\n    setFormData((prev) => ({ ...prev, [name]: value }))\n  }\n\n  const handleCheckboxChange = (checked: boolean) => {\n    setFormData((prev) => ({ ...prev, isActive: checked }))\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsSubmitting(true)\n\n    // 실제 구현 시에는 API를 호출하여 데이터를 저장합니다\n    try {\n      // API 호출 시뮬레이션\n      await new Promise((resolve) => setTimeout(resolve, 1000))\n\n      // 성공 시 목록 페이지로 이동\n      router.push(\"/admin/jobs\")\n    } catch (error) {\n      console.error(\"Error updating job:\", error)\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  return (\n    <div className=\"container py-8\">\n      <div className=\"mx-auto max-w-3xl\">\n        <Card>\n          <CardHeader>\n            <CardTitle>채용 공고 수정 (ID: {jobId})</CardTitle>\n          </CardHeader>\n          <form onSubmit={handleSubmit}>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">제목</Label>\n                  <Input id=\"title\" name=\"title\" value={formData.title} onChange={handleChange} required />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"company\">회사명</Label>\n                  <Input id=\"company\" name=\"company\" value={formData.company} onChange={handleChange} required />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-3\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"location\">지역</Label>\n                  <Input id=\"location\" name=\"location\" value={formData.location} onChange={handleChange} required />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"experience\">경력</Label>\n                  <Select\n                    value={formData.experience}\n                    onValueChange={(value) => handleSelectChange(\"experience\", value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"신입\">신입</SelectItem>\n                      <SelectItem value=\"1~3년\">1~3년</SelectItem>\n                      <SelectItem value=\"3~5년\">3~5년</SelectItem>\n                      <SelectItem value=\"5년 이상\">5년 이상</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"employmentType\">고용형태</Label>\n                  <Select\n                    value={formData.employmentType}\n                    onValueChange={(value) => handleSelectChange(\"employmentType\", value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"정규직\">정규직</SelectItem>\n                      <SelectItem value=\"계약직\">계약직</SelectItem>\n                      <SelectItem value=\"인턴\">인턴</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"deadline\">마감일</Label>\n                <Input\n                  id=\"deadline\"\n                  name=\"deadline\"\n                  type=\"date\"\n                  value={formData.deadline}\n                  onChange={handleChange}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">직무 설명</Label>\n                <Textarea\n                  id=\"description\"\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleChange}\n                  rows={4}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"requirements\">자격 요건</Label>\n                <Textarea\n                  id=\"requirements\"\n                  name=\"requirements\"\n                  value={formData.requirements}\n                  onChange={handleChange}\n                  rows={4}\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"benefits\">복리후생</Label>\n                <Textarea id=\"benefits\" name=\"benefits\" value={formData.benefits} onChange={handleChange} rows={4} />\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox id=\"isActive\" checked={formData.isActive} onCheckedChange={handleCheckboxChange} />\n                <Label htmlFor=\"isActive\">활성화</Label>\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex justify-between\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => router.push(\"/admin/jobs\")}>\n                취소\n              </Button>\n              <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? \"저장 중...\" : \"저장\"}\n              </Button>\n            </CardFooter>\n          </form>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\n"
                        }
                    }
                }
            }
        },
        "community": {
            "__files__": {
                "loading.tsx": "export default function Loading() {\n  return null\n}\n\n",
                "page.tsx": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Plus, Eye, ThumbsUp, MessageSquare } from \"lucide-react\";\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/components/ui/pagination\";\nimport { fetchPosts } from \"@/utils/api\";\n\nexport default function CommunityPage() {\n  const [posts, setPosts] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    fetchPosts()\n      .then((data) => {\n        setPosts(data);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching community posts:\", error);\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  const filteredPosts = posts.filter((post) =>\n    post.title.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  console.log(filteredPosts)\n\n  return (\n    <div className=\"container py-8\">\n      <div className=\"flex flex-col gap-6\">\n        <div className=\"flex flex-col gap-2\">\n          <h1 className=\"text-3xl font-bold tracking-tight bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n            SW 커뮤니티\n          </h1>\n          <p className=\"text-muted-foreground\">\n            소프트웨어 관련 정보를 공유하고 질문하는 커뮤니티입니다.\n          </p>\n        </div>\n\n        {/* 검색 및 필터 */}\n        <div className=\"flex flex-col gap-4 sm:flex-row\">\n          <div className=\"flex flex-1 items-center gap-2\">\n            <Input\n              placeholder=\"검색어를 입력하세요\"\n              className=\"max-w-sm\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n            <Button size=\"icon\" variant=\"outline\">\n              <Search className=\"h-4 w-4\" />\n              <span className=\"sr-only\">검색</span>\n            </Button>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" asChild>\n              <Link href=\"/community/write\" className=\"gap-1\">\n                <Plus className=\"h-4 w-4\" />\n                글쓰기\n              </Link>\n            </Button>\n          </div>\n        </div>\n\n        {/* 게시글 목록 */}\n        <div className=\"grid gap-4\">\n          {filteredPosts.map((post) => (\n            <Link key={post.id} href={`/community/${post.id}`} className=\"block\">\n              <Card className=\"gradient-card cursor-pointer\">\n                <CardHeader>\n                  <div className=\"flex flex-col gap-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">{post.title}</CardTitle>\n                      {post.category && <Badge variant=\"outline\">{post.category}</Badge>}\n                    </div>\n                    <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                      <span>{post.username}</span>\n                      <span>{new Date(post.createdDate).toLocaleDateString()}</span>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground line-clamp-2\">{post.content}</p>\n                </CardContent>\n                <CardFooter>\n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    <div className=\"flex items-center gap-1\">\n                      <Eye className=\"h-4 w-4\" />\n                      <span>{post.viewCount}</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <ThumbsUp className=\"h-4 w-4\" />\n                      <span>{post.likeCount}</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <MessageSquare className=\"h-4 w-4\" />\n                      <span>{Array.isArray(post.comments) ? post.comments.length : 0}</span>\n                    </div>\n                  </div>\n                </CardFooter>\n              </Card>\n            </Link>\n          ))}\n        </div>\n\n        {/* 페이지네이션 (예시) */}\n        <Pagination>\n          <PaginationContent>\n            <PaginationItem>\n              <PaginationPrevious href=\"#\" />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\" isActive>\n                1\n              </PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\">2</PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\">3</PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationEllipsis />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationNext href=\"#\" />\n            </PaginationItem>\n          </PaginationContent>\n        </Pagination>\n      </div>\n    </div>\n  );\n}\n"
            },
            "write": {
                "__files__": {
                    "page.tsx": "\"use client\";\n\nimport type React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { createPost } from \"@/utils/api\";\nimport { useAuth } from \"@/context/AuthContext\";\n\nexport default function WritePage() {\n  const router = useRouter();\n  const { token } = useAuth();\n\n  // 로그인 상태가 아니라면 로그인 페이지로 이동\n  useEffect(() => {\n    if (!token) {\n      router.push(\"/login\");\n    }\n  }, [token, router]);\n\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    setError(null);\n\n    try {\n      // 토큰을 포함하여 게시글 생성 API 호출 (백엔드에서는 현재 로그인한 사용자의 id를 authorId로 자동 처리)\n      await createPost({ title, content, category }, token as string);\n      router.push(\"/community\");\n    } catch (err: any) {\n      console.error(\"Error submitting post:\", err);\n      setError(err.message || \"게시글 작성에 실패했습니다.\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"container py-8\">\n      <div className=\"mx-auto max-w-2xl\">\n        <Card>\n          <CardHeader>\n            <CardTitle>게시글 작성</CardTitle>\n          </CardHeader>\n          <form onSubmit={handleSubmit}>\n            <CardContent className=\"space-y-4\">\n              {error && <p className=\"text-red-500\">{error}</p>}\n              <div className=\"space-y-2\">\n                <label htmlFor=\"category\" className=\"text-sm font-medium\">\n                  카테고리\n                </label>\n                <Select value={category} onValueChange={setCategory} required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"카테고리 선택\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"study\">스터디</SelectItem>\n                    <SelectItem value=\"job\">취업</SelectItem>\n                    <SelectItem value=\"qna\">질문/답변</SelectItem>\n                    <SelectItem value=\"portfolio\">포트폴리오</SelectItem>\n                    <SelectItem value=\"free\">자유</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <label htmlFor=\"title\" className=\"text-sm font-medium\">\n                  제목\n                </label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"제목을 입력하세요\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <label htmlFor=\"content\" className=\"text-sm font-medium\">\n                  내용\n                </label>\n                <Textarea\n                  id=\"content\"\n                  placeholder=\"내용을 입력하세요\"\n                  value={content}\n                  onChange={(e) => setContent(e.target.value)}\n                  rows={10}\n                  required\n                />\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex justify-between\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => router.back()}>\n                취소\n              </Button>\n              <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? \"저장 중...\" : \"저장\"}\n              </Button>\n            </CardFooter>\n          </form>\n        </Card>\n      </div>\n    </div>\n  );\n}\n"
                }
            },
            "[id]": {
                "__files__": {
                    "page.tsx": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ChevronLeft, ThumbsUp, Eye, MessageSquare, Send, Share2 } from \"lucide-react\";\n\n// API 함수 임포트\nimport { fetchPostById, likePost, addComment } from \"@/utils/api\";\n// 인증 컨텍스트 임포트 (user는 { id, username } 형태로 관리됩니다)\nimport { useAuth } from \"@/context/AuthContext\";\n\nexport default function PostDetailPage() {\n  const params = useParams();\n  const router = useRouter();\n  const postId = params.id as string;\n  const { token, user, authLoading } = useAuth();\n\n  const [post, setPost] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [liked, setLiked] = useState(false);\n  const [comment, setComment] = useState(\"\");\n  const [comments, setComments] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (postId) {\n      fetchPostById(postId)\n        .then((data) => {\n          setPost(data);\n          setComments(data.comments || []);\n          setLoading(false);\n          console.log(data)\n        })\n        .catch((error) => {\n          console.error(\"Error fetching post details:\", error);\n          setLoading(false);\n        });\n    }\n  }, [postId]);\n\n  const handleLike = async () => {\n    if (!liked && post && token) {\n      try {\n        const updatedPost = await likePost(postId, token);\n        setLiked(true);\n        setPost(updatedPost);\n      } catch (error) {\n        console.error(\"Error liking post:\", error);\n      }\n    }\n  };\n\n  const handleAddComment = async () => {\n    if (authLoading) {\n      console.warn(\"인증 정보를 불러오는 중입니다. 잠시 후 다시 시도해 주세요.\");\n      return;\n    }\n    if (!token) {\n      router.push(\"/login\");\n      return;\n    }\n    if (!user) {\n      router.push(\"/login\");\n      return;\n    }\n\n    if (comment.trim() && post) {\n      try {\n        const newComment = await addComment(postId, { content: comment, authorId: user.id }, token);\n        setComments([...comments, newComment]);\n        setPost({\n          ...post,\n          comments: [...(post.comments || []), newComment],\n        });\n        setComment(\"\");\n      } catch (error) {\n        console.error(\"Error adding comment:\", error);\n      }\n    }\n  };\n\n  if (loading) {\n    return <div className=\"container py-8\">로딩 중...</div>;\n  }\n\n  if (!post) {\n    return <div className=\"container py-8\">게시글을 찾을 수 없습니다.</div>;\n  }\n\n  return (\n    <div className=\"container py-8\">\n      <div className=\"flex flex-col gap-6 max-w-4xl mx-auto\">\n        <Button variant=\"ghost\" className=\"w-fit\" onClick={() => router.back()}>\n          <ChevronLeft className=\"mr-2 h-4 w-4\" />\n          목록으로 돌아가기\n        </Button>\n\n        <Card className=\"gradient-card\">\n          <CardHeader>\n            <div className=\"flex flex-col gap-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-2xl font-bold tracking-tight bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                  {post.title}\n                </CardTitle>\n                {post.category && <Badge variant=\"outline\">{post.category}</Badge>}\n              </div>\n              <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                <div className=\"flex items-center gap-2\">\n                  <Avatar className=\"h-6 w-6\">\n                    <AvatarImage src=\"/placeholder-user.jpg\" alt={post.username} />\n                    <AvatarFallback>{post.username ? post.username[0] : \"U\"}</AvatarFallback>\n                  </Avatar>\n                  <span>{post.username}</span>\n                </div>\n                <span>{new Date(post.createdDate).toLocaleDateString()}</span>\n                <div className=\"flex items-center gap-1\">\n                  <Eye className=\"h-4 w-4\" />\n                  <span>{post.viewCount}</span>\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"prose max-w-none\">{post.content}</div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col items-start gap-4\">\n            <div className=\"flex items-center justify-between w-full\">\n              <div className=\"flex items-center gap-4\">\n                <Button variant={liked ? \"default\" : \"outline\"} size=\"sm\" className=\"gap-2\" onClick={handleLike}>\n                  <ThumbsUp className=\"h-4 w-4\" />\n                  좋아요 {post.likeCount}\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n                  <Share2 className=\"h-4 w-4\" />\n                  공유하기\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                <MessageSquare className=\"h-4 w-4\" />\n                <span>댓글 {comments.length}</span>\n              </div>\n            </div>\n          </CardFooter>\n        </Card>\n\n        <div className=\"flex flex-col gap-4\">\n          <h2 className=\"text-xl font-bold\">댓글</h2>\n          <Separator />\n          <div className=\"flex flex-col gap-4\">\n            {comments.length === 0 ? (\n              <p className=\"text-muted-foreground text-center py-4\">첫 번째 댓글을 작성해보세요!</p>\n            ) : (\n              comments.map((c, index) => (\n                <div key={index} className=\"flex gap-3 p-4 border rounded-lg\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src=\"/placeholder-user.jpg\" alt={c.username} />\n                    <AvatarFallback>{c.username ? c.username[0] : \"?\"}</AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex flex-col gap-1 flex-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-medium\">{c.username}</span>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {new Date(c.createdDate).toLocaleDateString()}\n                      </span>\n                    </div>\n                    <p className=\"text-sm\">{c.content}</p>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n\n          <div className=\"flex flex-col gap-2 mt-4\">\n            <h3 className=\"text-sm font-medium\">댓글 작성</h3>\n            <div className=\"flex gap-2\">\n              <Textarea\n                placeholder=\"댓글을 입력하세요\"\n                value={comment}\n                onChange={(e) => setComment(e.target.value)}\n                className=\"min-h-[80px]\"\n              />\n            </div>\n            <Button className=\"self-end gap-2\" onClick={handleAddComment} disabled={!comment.trim()}>\n              <Send className=\"h-4 w-4\" />\n              댓글 등록\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
                }
            }
        },
        "contests": {
            "__files__": {
                "page.tsx": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ExternalLink } from \"lucide-react\";\nimport { fetchItContestSites } from \"@/utils/api\";\n\nexport default function ContestsPage() {\n  const [sites, setSites] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchItContestSites()\n      .then((data) => {\n        setSites(data);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching contest sites:\", error);\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"container py-8\">\n      <div className=\"flex flex-col gap-6\">\n        <div className=\"flex flex-col gap-2\">\n          <h1 className=\"text-3xl font-bold tracking-tight bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n            공모전 사이트 목록\n          </h1>\n          <p className=\"text-muted-foreground\">\n            IT 관련 공모전 정보를 제공하는 사이트 목록입니다.\n          </p>\n        </div>\n        <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n          {sites.map((site: any) => (\n            <Card key={site.id} className=\"gradient-card flex flex-col\">\n              <CardHeader className=\"flex flex-row items-center gap-4\">\n                <Image\n                  src={site.logo || \"/placeholder.svg\"}\n                  alt={`${site.title} 로고`}\n                  width={80}\n                  height={80}\n                  className=\"rounded-md\"\n                />\n                <CardTitle className=\"text-xl\">{site.title}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"flex-1\">\n                <p className=\"text-sm text-muted-foreground\">{site.extraDescription}</p>\n              </CardContent>\n              <CardFooter>\n                <Button className=\"w-full gap-1\" asChild>\n                  <a href={site.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                    사이트 방문하기\n                    <ExternalLink className=\"h-4 w-4\" />\n                  </a>\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n"
            }
        },
        "internships": {
            "__files__": {
                "page.tsx": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, MapPin, Building, Clock, ExternalLink } from \"lucide-react\";\nimport { Pagination } from \"@/components/ui/pagination\";\nimport { fetchInternshipInfos } from \"@/utils/api\";\n\nexport default function InternshipsPage() {\n  const [internships, setInternships] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchInternshipInfos()\n      .then((data) => {\n        setInternships(data);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching internships:\", error);\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"container py-8\">\n      <div className=\"flex flex-col gap-6\">\n        <div className=\"flex flex-col gap-2\">\n          <h1 className=\"text-3xl font-bold tracking-tight bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n            인턴십 정보\n          </h1>\n          <p className=\"text-muted-foreground\">\n            인하대학교 학생들을 위한 다양한 인턴십 프로그램 정보를 확인하세요.\n          </p>\n        </div>\n\n        {/* 인턴십 목록 */}\n        <div className=\"grid gap-4\">\n          {internships.map((internship: any) => (\n            <Card key={internship.id} className=\"gradient-card\">\n              <CardHeader>\n                <div className=\"flex flex-col gap-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">{internship.institutionName} 인턴십</CardTitle>\n                    <Badge className=\"bg-secondary hover:bg-secondary/80\">\n                      {internship.governmentFunded ? \"국고사업\" : \"비국고\"}\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-2\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Building className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{internship.department}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{internship.location}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{internship.internshipPeriod}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>접수마감: {new Date(internship.applicationDeadline).toLocaleDateString()}</span>\n                  </div>\n                  <p className=\"mt-2 text-sm text-muted-foreground\">\n                    {internship.recruitmentInfo}\n                  </p>\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button className=\"gap-1\" asChild>\n                  <Link href={`/internships/${internship.id}`}>\n                    상세 정보 보기\n                    <ExternalLink className=\"h-4 w-4\" />\n                  </Link>\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n\n        {/* 페이지네이션 예시 */}\n        <Pagination>\n          {/* 페이지네이션 컴포넌트 구성 */}\n        </Pagination>\n      </div>\n    </div>\n  );\n}\n"
            }
        },
        "jobs": {
            "__files__": {
                "loading.tsx": "export default function Loading() {\n  return null\n}\n\n",
                "page.tsx": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Building, MapPin, Calendar, Briefcase, ExternalLink } from \"lucide-react\";\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/components/ui/pagination\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { fetchJobPostings } from \"@/utils/api\";\n\nexport default function JobsPage() {\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchJobPostings()\n      .then((data) => {\n        setJobs(data);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching job postings:\", error);\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"container py-8\">\n      <div className=\"flex flex-col gap-6\">\n        <div className=\"flex flex-col gap-2\">\n          <h1 className=\"text-3xl font-bold tracking-tight bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n            채용 공고\n          </h1>\n          <p className=\"text-muted-foreground\">\n            사람인에서 제공하는 최신 IT 채용 정보를 확인하고 지원하세요.\n          </p>\n        </div>\n\n        {/* 검색 및 필터 */}\n        <div className=\"flex flex-col gap-4 sm:flex-row\">\n          <div className=\"flex flex-1 items-center gap-2\">\n            <Input placeholder=\"검색어를 입력하세요\" className=\"max-w-sm\" />\n            <Button size=\"icon\" variant=\"outline\">\n              <Search className=\"h-4 w-4\" />\n              <span className=\"sr-only\">검색</span>\n            </Button>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Select>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"경력\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체</SelectItem>\n                <SelectItem value=\"new\">신입</SelectItem>\n                <SelectItem value=\"experienced\">경력</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"지역\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체</SelectItem>\n                <SelectItem value=\"seoul\">서울</SelectItem>\n                <SelectItem value=\"gyeonggi\">경기</SelectItem>\n                <SelectItem value=\"other\">기타 지역</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* 채용 공고 목록 */}\n        <div className=\"grid gap-4\">\n          {jobs.map((job: any) => (\n            <Card key={job.id} className=\"gradient-card\">\n              <CardHeader>\n                <div className=\"flex flex-col gap-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">{job.title}</CardTitle>\n                    <Badge className=\"bg-secondary hover:bg-secondary/80\">\n                      {job.employmentType}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Building className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm font-medium\">{job.company}</span>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-2\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{job.location}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Briefcase className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>경력: {job.experience}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>마감일: {job.deadline}</span>\n                  </div>\n                  <div className=\"mt-2 flex flex-wrap gap-2\">\n                    {job.skills.map((skill: string) => (\n                      <Badge key={skill} variant=\"outline\" className=\"bg-background/50\">\n                        {skill}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n              <CardFooter className=\"flex justify-between\">\n                <Button variant=\"outline\" asChild>\n                  <Link href={`/jobs/${job.id}`}>상세 정보</Link>\n                </Button>\n                <Button className=\"gap-1\" asChild>\n                  <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    지원하기\n                    <ExternalLink className=\"h-4 w-4\" />\n                  </a>\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n\n        {/* 페이지네이션 (예시) */}\n        <Pagination>\n          <PaginationContent>\n            <PaginationItem>\n              <PaginationPrevious href=\"#\" />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\" isActive>\n                1\n              </PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\">2</PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\">3</PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationEllipsis />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationNext href=\"#\" />\n            </PaginationItem>\n          </PaginationContent>\n        </Pagination>\n      </div>\n    </div>\n  );\n}\n"
            }
        },
        "login": {
            "__files__": {
                "page.tsx": "\"use client\"\n\nimport type React from \"react\"\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { AlertCircle } from \"lucide-react\"\nimport { login as loginAPI } from \"@/utils/api\"\nimport { useAuth } from \"@/context/AuthContext\"\n\nexport default function LoginPage() {\n  const router = useRouter()\n  const { login } = useAuth()\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const data = await loginAPI(username, password)\n      // 수정된 부분: 반환받은 data의 token과 user를 모두 전달합니다.\n      login(data.token, data.user)\n      // 관리자라면 관리자 페이지로, 그 외는 홈으로 이동\n      if (username === \"admin\") {\n        router.push(\"/admin/jobs\")\n      } else {\n        router.push(\"/\")\n      }\n    } catch (err: any) {\n      setError(err.message || \"로그인에 실패했습니다. 아이디와 비밀번호를 확인해주세요.\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"container flex h-screen items-center justify-center\">\n      <div className=\"mx-auto w-full max-w-md\">\n        <Card className=\"gradient-card\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-bold\">로그인</CardTitle>\n            <CardDescription>아이디와 비밀번호를 입력하여 로그인하세요.</CardDescription>\n          </CardHeader>\n          <form onSubmit={handleSubmit}>\n            <CardContent className=\"space-y-4\">\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">아이디</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"아이디를 입력하세요\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">비밀번호</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                />\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex flex-col\">\n              <Button className=\"w-full bg-primary hover:bg-primary/90\" type=\"submit\" disabled={isLoading}>\n                {isLoading ? \"로그인 중...\" : \"로그인\"}\n              </Button>\n              <div className=\"mt-4 text-center text-sm\">\n                계정이 없으신가요?{\" \"}\n                <Link href=\"/register\" className=\"text-primary hover:underline\">\n                  회원가입\n                </Link>\n              </div>\n            </CardFooter>\n          </form>\n        </Card>\n      </div>\n    </div>\n  )\n}\n"
            }
        },
        "notices": {
            "__files__": {
                "loading.tsx": "export default function Loading() {\n  return null\n}\n\n",
                "page.tsx": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { ExternalLink, Search, Calendar } from \"lucide-react\";\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/components/ui/pagination\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { fetchSwNotices } from \"@/utils/api\";\n\nexport default function NoticesPage() {\n  const [notices, setNotices] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchSwNotices()\n      .then((data) => {\n        setNotices(data);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching notices:\", error);\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"container py-8\">\n      <div className=\"flex flex-col gap-6\">\n        <div className=\"flex flex-col gap-2\">\n          <h1 className=\"text-3xl font-bold tracking-tight bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n            공지사항\n          </h1>\n          <p className=\"text-muted-foreground\">\n            SW중심사업단에서 제공하는 최신 공지사항과 이벤트 정보를 확인하세요.\n          </p>\n        </div>\n\n        {/* 검색 및 필터 */}\n        <div className=\"flex flex-col gap-4 sm:flex-row\">\n          <div className=\"flex flex-1 items-center gap-2\">\n            <Input placeholder=\"검색어를 입력하세요\" className=\"max-w-sm\" />\n            <Button size=\"icon\" variant=\"outline\">\n              <Search className=\"h-4 w-4\" />\n              <span className=\"sr-only\">검색</span>\n            </Button>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Select>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"정렬 기준\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"latest\">최신순</SelectItem>\n                <SelectItem value=\"oldest\">오래된순</SelectItem>\n                <SelectItem value=\"title\">제목순</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button variant=\"outline\" size=\"icon\">\n              <Calendar className=\"h-4 w-4\" />\n              <span className=\"sr-only\">날짜 선택</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* 공지사항 목록 */}\n        <div className=\"grid gap-4\">\n          {notices.map((notice: any) => (\n            <Card key={notice.id} className=\"gradient-card\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">{notice.title}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-col gap-2\">\n                  <p className=\"text-sm text-muted-foreground\">{notice.description}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    등록일: {new Date(notice.createdDate).toLocaleDateString()}\n                  </p>\n                </div>\n              </CardContent>\n              <CardFooter className=\"flex justify-between\">\n                <Button variant=\"outline\" size=\"sm\" className=\"gap-1\" asChild>\n                  <Link href={`/notices/${notice.id}`}>\n                    자세히 보기\n                    <ExternalLink className=\"h-4 w-4\" />\n                  </Link>\n                </Button>\n                <Button variant=\"ghost\" size=\"sm\" asChild>\n                  <a href={notice.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                    원문 보기\n                  </a>\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n\n        {/* 페이지네이션 (예시) */}\n        <Pagination>\n          <PaginationContent>\n            <PaginationItem>\n              <PaginationPrevious href=\"#\" />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\" isActive>\n                1\n              </PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\">2</PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\">3</PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationEllipsis />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationNext href=\"#\" />\n            </PaginationItem>\n          </PaginationContent>\n        </Pagination>\n      </div>\n    </div>\n  );\n}\n"
            }
        },
        "profile": {
            "__files__": {
                "page.tsx": "import Link from \"next/link\"\nimport { notFound } from \"next/navigation\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Calendar, MessageSquare, Mail, FileText, ExternalLink, Eye, ThumbsUp } from \"lucide-react\"\n\n// 실제 구현 시에는 API에서 데이터를 가져옵니다\nasync function getUserData(id: string) {\n  // 여기서는 더미 데이터를 반환합니다\n  return {\n    id: Number.parseInt(id),\n    email: `user${id}@example.com`,\n    username: `user${id}`,\n    joinDate: \"2023-01-15\",\n    postsCount: 12,\n    commentsCount: 28,\n  }\n}\n\n// 사용자가 작성한 게시글 목록을 가져옵니다\nasync function getUserPosts(id: string) {\n  // 여기서는 더미 데이터를 반환합니다\n  return Array.from({ length: 5 }).map((_, i) => ({\n    id: i + 1,\n    title: [\n      \"React와 Next.js 스터디 모집합니다\",\n      \"취업 준비 팁 공유합니다\",\n      \"포트폴리오 피드백 부탁드립니다\",\n      \"코딩 테스트 준비 방법\",\n      \"인턴십 경험 공유\",\n    ][i % 5],\n    date: `2023-${9 - (i % 3)}-${28 - (i % 28)}`,\n    category: [\"스터디\", \"취업\", \"포트폴리오\", \"코딩테스트\", \"인턴십\"][i % 5],\n    views: Math.floor(Math.random() * 100) + 10,\n    likes: Math.floor(Math.random() * 20),\n    comments: Math.floor(Math.random() * 10),\n    excerpt: \"게시글 내용의 일부입니다. 이 부분은 게시글의 미리보기로 표시됩니다...\",\n  }))\n}\n\n// 사용자가 작성한 댓글 목록을 가져옵니다\nasync function getUserComments(id: string) {\n  // 여기서는 더미 데이터를 반환합니다\n  return Array.from({ length: 8 }).map((_, i) => ({\n    id: i + 1,\n    postId: Math.floor(Math.random() * 100) + 1,\n    postTitle: [\n      \"프론트엔드 개발자 취업 준비\",\n      \"알고리즘 스터디 모집\",\n      \"포트폴리오 작성 팁\",\n      \"인하대 소프트웨어학과 과목 추천\",\n      \"개발자 로드맵 공유\",\n    ][i % 5],\n    content: \"댓글 내용입니다. 이 글에 대한 의견을 남겼습니다.\",\n    date: `2023-${10 - (i % 3)}-${25 - (i % 20)}`,\n  }))\n}\n\nexport default async function UserProfilePage({ params }: { params: { id: string } }) {\n  // 실제 구현 시에는 API에서 데이터를 가져옵니다\n  try {\n    const userData = await getUserData(params.id)\n    const userPosts = await getUserPosts(params.id)\n    const userComments = await getUserComments(params.id)\n\n    return (\n      <div className=\"container py-8\">\n        <div className=\"flex flex-col gap-8\">\n          {/* 사용자 정보 카드 */}\n          <Card className=\"gradient-card\">\n            <CardHeader>\n              <div className=\"flex flex-col md:flex-row items-start md:items-center gap-4\">\n                <Avatar className=\"h-20 w-20\">\n                  <AvatarImage src={`/placeholder.svg?height=80&width=80`} alt={userData.username} />\n                  <AvatarFallback className=\"text-2xl\">{userData.username.charAt(0).toUpperCase()}</AvatarFallback>\n                </Avatar>\n                <div className=\"space-y-1\">\n                  <CardTitle className=\"text-2xl bg-gradient-to-r from-blue-600 to-cyan-500 bg-clip-text text-transparent\">\n                    {userData.username}의 프로필\n                  </CardTitle>\n                  <CardDescription>\n                    <div className=\"flex flex-col gap-1 mt-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{userData.email}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>가입일: {userData.joinDate}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2 mt-2\">\n                        <Badge variant=\"outline\" className=\"mr-1\">\n                          게시글 {userData.postsCount}\n                        </Badge>\n                        <Badge variant=\"outline\">댓글 {userData.commentsCount}</Badge>\n                      </div>\n                    </div>\n                  </CardDescription>\n                </div>\n              </div>\n            </CardHeader>\n          </Card>\n\n          {/* 게시글 및 댓글 탭 */}\n          <Tabs defaultValue=\"posts\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"posts\" className=\"flex items-center gap-2\">\n                <FileText className=\"h-4 w-4\" />\n                작성한 게시글\n              </TabsTrigger>\n              <TabsTrigger value=\"comments\" className=\"flex items-center gap-2\">\n                <MessageSquare className=\"h-4 w-4\" />\n                작성한 댓글\n              </TabsTrigger>\n            </TabsList>\n\n            {/* 게시글 탭 내용 */}\n            <TabsContent value=\"posts\" className=\"mt-6\">\n              <div className=\"grid gap-4\">\n                {userPosts.length > 0 ? (\n                  userPosts.map((post) => (\n                    <Card key={post.id} className=\"gradient-card\">\n                      <CardHeader>\n                        <div className=\"flex flex-col gap-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <CardTitle className=\"text-lg\">\n                              <Link href={`/community/${post.id}`} className=\"hover:underline\">\n                                {post.title}\n                              </Link>\n                            </CardTitle>\n                            <Badge variant=\"outline\">{post.category}</Badge>\n                          </div>\n                          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                            <span>{post.date}</span>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-sm text-muted-foreground line-clamp-2\">{post.excerpt}</p>\n                      </CardContent>\n                      <CardFooter>\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center gap-1\">\n                            <Eye className=\"h-4 w-4\" />\n                            <span>{post.views}</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <ThumbsUp className=\"h-4 w-4\" />\n                            <span>{post.likes}</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <MessageSquare className=\"h-4 w-4\" />\n                            <span>{post.comments}</span>\n                          </div>\n                          <div className=\"ml-auto\">\n                            <Button variant=\"outline\" size=\"sm\" className=\"gap-1\" asChild>\n                              <Link href={`/community/${post.id}`}>\n                                자세히 보기\n                                <ExternalLink className=\"h-4 w-4\" />\n                              </Link>\n                            </Button>\n                          </div>\n                        </div>\n                      </CardFooter>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-muted-foreground\">작성한 게시글이 없습니다.</p>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            {/* 댓글 탭 내용 */}\n            <TabsContent value=\"comments\" className=\"mt-6\">\n              <div className=\"grid gap-4\">\n                {userComments.length > 0 ? (\n                  userComments.map((comment) => (\n                    <Card key={comment.id} className=\"gradient-card\">\n                      <CardHeader>\n                        <div className=\"flex flex-col gap-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <CardTitle className=\"text-base\">\n                              <Link href={`/community/${comment.postId}`} className=\"hover:underline\">\n                                {comment.postTitle}\n                              </Link>\n                            </CardTitle>\n                            <span className=\"text-sm text-muted-foreground\">{comment.date}</span>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-sm\">{comment.content}</p>\n                      </CardContent>\n                      <CardFooter>\n                        <Button variant=\"outline\" size=\"sm\" className=\"gap-1 ml-auto\" asChild>\n                          <Link href={`/community/${comment.postId}`}>\n                            원문 보기\n                            <ExternalLink className=\"h-4 w-4\" />\n                          </Link>\n                        </Button>\n                      </CardFooter>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-muted-foreground\">작성한 댓글이 없습니다.</p>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    )\n  } catch (error) {\n    return notFound()\n  }\n}\n\n"
            },
            "edit": {
                "__files__": {
                    "page.tsx": "\"use client\"\n\nimport { useEffect } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Button } from \"@/components/ui/button\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { User, Lock, LogOut } from \"lucide-react\"\n\nexport default function ProfilePage() {\n  const router = useRouter()\n\n  // 실제 구현 시에는 로그인 상태를 확인하고 로그인되지 않은 경우 로그인 페이지로 리다이렉트합니다\n  useEffect(() => {\n    // 예시: 로그인 상태 확인 로직\n    const isLoggedIn = true // 실제로는 로그인 상태를 확인하는 로직이 필요합니다\n\n    if (!isLoggedIn) {\n      router.push(\"/login\")\n    }\n  }, [router])\n\n  // 더미 사용자 데이터\n  const user = {\n    id: 1,\n    username: \"user1\",\n    email: \"user1@example.com\",\n    joinDate: \"2023-01-15\",\n    postsCount: 12,\n    commentsCount: 28,\n  }\n\n  return (\n    <div className=\"container py-8\">\n      <div className=\"flex flex-col gap-8 max-w-3xl mx-auto\">\n        <div className=\"flex flex-col md:flex-row items-start md:items-center gap-4\">\n          <Avatar className=\"h-20 w-20\">\n            <AvatarImage src={`/placeholder.svg?height=80&width=80`} alt={user.username} />\n            <AvatarFallback className=\"text-2xl\">{user.username.charAt(0).toUpperCase()}</AvatarFallback>\n          </Avatar>\n          <div>\n            <h1 className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-cyan-500 bg-clip-text text-transparent\">\n              내 프로필\n            </h1>\n            <p className=\"text-muted-foreground\">계정 정보 관리 및 활동 내역 확인</p>\n          </div>\n          <Button variant=\"outline\" className=\"ml-auto gap-2\" onClick={() => router.push(\"/login\")}>\n            <LogOut className=\"h-4 w-4\" />\n            로그아웃\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"account\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"account\" className=\"flex items-center gap-2\">\n              <User className=\"h-4 w-4\" />\n              계정 정보\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\n              <Lock className=\"h-4 w-4\" />\n              보안\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"account\" className=\"mt-6 space-y-4\">\n            <Card className=\"gradient-card\">\n              <CardHeader>\n                <CardTitle>프로필 정보</CardTitle>\n                <CardDescription>프로필 정보를 확인하고 수정할 수 있습니다.</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">사용자명</Label>\n                  <div className=\"flex gap-2\">\n                    <Input id=\"username\" value={user.username} readOnly />\n                    <Button variant=\"outline\">변경</Button>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">이메일</Label>\n                  <div className=\"flex gap-2\">\n                    <Input id=\"email\" value={user.email} readOnly />\n                    <Button variant=\"outline\">변경</Button>\n                  </div>\n                </div>\n                <div className=\"pt-4 flex justify-between\">\n                  <Button variant=\"outline\" className=\"gap-1\" onClick={() => router.push(`/profile/${user.id}`)}>\n                    내 활동 보기\n                  </Button>\n                  <Button>변경사항 저장</Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"gradient-card\">\n              <CardHeader>\n                <CardTitle>활동 통계</CardTitle>\n                <CardDescription>내 활동 통계를 확인할 수 있습니다.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"flex flex-col items-center p-4 border rounded-lg\">\n                    <span className=\"text-2xl font-bold text-primary\">{user.postsCount}</span>\n                    <span className=\"text-sm text-muted-foreground\">작성한 게시글</span>\n                  </div>\n                  <div className=\"flex flex-col items-center p-4 border rounded-lg\">\n                    <span className=\"text-2xl font-bold text-primary\">{user.commentsCount}</span>\n                    <span className=\"text-sm text-muted-foreground\">작성한 댓글</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"security\" className=\"mt-6 space-y-4\">\n            <Card className=\"gradient-card\">\n              <CardHeader>\n                <CardTitle>비밀번호 변경</CardTitle>\n                <CardDescription>계정 보안을 위해 주기적으로 비밀번호를 변경하세요.</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"current-password\">현재 비밀번호</Label>\n                  <Input id=\"current-password\" type=\"password\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"new-password\">새 비밀번호</Label>\n                  <Input id=\"new-password\" type=\"password\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirm-password\">비밀번호 확인</Label>\n                  <Input id=\"confirm-password\" type=\"password\" />\n                </div>\n                <div className=\"pt-4 flex justify-end\">\n                  <Button>비밀번호 변경</Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"gradient-card\">\n              <CardHeader>\n                <CardTitle>계정 삭제</CardTitle>\n                <CardDescription>계정을 삭제하면 모든 데이터가 영구적으로 삭제됩니다.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button variant=\"destructive\">계정 삭제</Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  )\n}\n\n"
                }
            }
        },
        "register": {
            "__files__": {
                "page.tsx": "\"use client\"\n\nimport type React from \"react\"\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { AlertCircle } from \"lucide-react\"\nimport { register } from \"@/utils/api\" // 수정된 API 함수 임포트\n\nexport default function RegisterPage() {\n  const router = useRouter()\n  const [username, setUsername] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (password !== confirmPassword) {\n      setError(\"비밀번호가 일치하지 않습니다.\")\n      return\n    }\n\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      await register({ email, username, password })\n      // 회원가입 성공 후 로그인 페이지로 이동\n      router.push(\"/login\")\n    } catch (err: any) {\n      setError(err.message || \"회원가입에 실패했습니다.\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"container flex h-screen items-center justify-center\">\n      <div className=\"mx-auto w-full max-w-md\">\n        <Card className=\"gradient-card\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-bold\">회원가입</CardTitle>\n            <CardDescription>필요 정보를 입력하여 회원가입하세요.</CardDescription>\n          </CardHeader>\n          <form onSubmit={handleSubmit}>\n            <CardContent className=\"space-y-4\">\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">아이디</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"아이디를 입력하세요\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">이메일</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"name@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">비밀번호</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">비밀번호 확인</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  required\n                />\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex flex-col\">\n              <Button className=\"w-full bg-primary hover:bg-primary/90\" type=\"submit\" disabled={isLoading}>\n                {isLoading ? \"회원가입 중...\" : \"회원가입\"}\n              </Button>\n              <div className=\"mt-4 text-center text-sm\">\n                이미 계정이 있으신가요?{\" \"}\n                <Link href=\"/login\" className=\"text-primary hover:underline\">\n                  로그인\n                </Link>\n              </div>\n            </CardFooter>\n          </form>\n        </Card>\n      </div>\n    </div>\n  )\n}\n"
            }
        }
    },
    "components": {
        "__files__": {
            "footer.tsx": "import Link from \"next/link\"\n\nexport default function Footer() {\n  return (\n    <footer className=\"w-full border-t py-6 md:py-8 bg-muted/50\">\n      <div className=\"container flex flex-col items-center justify-between gap-4 md:flex-row\">\n        <div className=\"flex flex-col items-center gap-4 md:items-start\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <span className=\"font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n              인하SW커뮤니티\n            </span>\n          </Link>\n          <p className=\"text-center text-sm text-muted-foreground md:text-left\">\n            &copy; {new Date().getFullYear()} 인하대학교 소프트웨어 취업 정보 커뮤니티. 모든 권리 보유.\n          </p>\n        </div>\n        <div className=\"flex gap-4\">\n          <Link href=\"/about\" className=\"text-sm text-muted-foreground hover:underline\">\n            소개\n          </Link>\n          <Link href=\"/privacy\" className=\"text-sm text-muted-foreground hover:underline\">\n            개인정보처리방침\n          </Link>\n          <Link href=\"/terms\" className=\"text-sm text-muted-foreground hover:underline\">\n            이용약관\n          </Link>\n          <Link href=\"/contact\" className=\"text-sm text-muted-foreground hover:underline\">\n            문의하기\n          </Link>\n        </div>\n      </div>\n    </footer>\n  )\n}\n\n",
            "header.tsx": "\"use client\";\n\nimport Link from \"next/link\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Menu, User } from \"lucide-react\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport { cn } from \"@/lib/utils\";\nimport { ThemeToggle } from \"./theme-toggle\";\nimport Swal from \"sweetalert2\";\nimport { useAuth } from \"@/context/AuthContext\";\n\nconst navigation = [\n  { name: \"홈\", href: \"/\" },\n  { name: \"공지사항\", href: \"/notices\" },\n  { name: \"공모전\", href: \"/contests\" },\n  { name: \"인턴십\", href: \"/internships\" },\n  { name: \"커뮤니티\", href: \"/community\" },\n  { name: \"채용공고\", href: \"/jobs\" },\n];\n\nexport default function Header() {\n  const [isOpen, setIsOpen] = useState(false);\n  const pathname = usePathname();\n  const router = useRouter();\n  const { user, isLoggedIn, authLoading, logout } = useAuth();\n\n  const handleNavClick = (href: string) => (e: React.MouseEvent<HTMLAnchorElement>) => {\n    if (href === \"/jobs\") {\n      e.preventDefault();\n      Swal.fire({\n        icon: \"info\",\n        title: \"준비중입니다\",\n        text: \"채용공고 페이지는 준비중입니다.\",\n        confirmButtonText: \"확인\",\n      });\n      setIsOpen(false);\n    }\n  };\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 shadow-sm\">\n      <div className=\"container flex h-16 items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Sheet open={isOpen} onOpenChange={setIsOpen}>\n            <SheetTrigger asChild className=\"lg:hidden\">\n              <Button variant=\"outline\" size=\"icon\" aria-label=\"메뉴 열기\">\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"left\" className=\"w-[240px] sm:w-[300px]\">\n              <nav className=\"flex flex-col gap-4 mt-8\">\n                {navigation.map((item) => (\n                  <Link\n                    key={item.name}\n                    href={item.href}\n                    className={cn(\n                      \"text-lg font-medium transition-colors hover:text-primary\",\n                      pathname === item.href ? \"text-primary\" : \"text-muted-foreground\"\n                    )}\n                    onClick={handleNavClick(item.href)}\n                  >\n                    {item.name}\n                  </Link>\n                ))}\n                <div className=\"flex items-center gap-2 mt-4\">\n                  {!isLoggedIn ? (\n                    <>\n                      <Button variant=\"outline\" size=\"sm\" asChild>\n                        <Link href=\"/login\">로그인</Link>\n                      </Button>\n                      <Button size=\"sm\" asChild>\n                        <Link href=\"/register\">회원가입</Link>\n                      </Button>\n                    </>\n                  ) : (\n                    <Button size=\"sm\" onClick={handleLogout}>\n                      로그아웃\n                    </Button>\n                  )}\n                </div>\n              </nav>\n            </SheetContent>\n          </Sheet>\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <span className=\"font-bold text-xl bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n              INHASH\n            </span>\n          </Link>\n        </div>\n        <nav className=\"hidden lg:flex items-center gap-6\">\n          {navigation.map((item) => (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={cn(\n                \"text-sm font-medium transition-colors hover:text-primary\",\n                pathname === item.href ? \"text-primary\" : \"text-muted-foreground\"\n              )}\n              onClick={handleNavClick(item.href)}\n            >\n              {item.name}\n            </Link>\n          ))}\n        </nav>\n        <div className=\"flex items-center gap-2\">\n          <ThemeToggle />\n          <div className=\"hidden sm:flex items-center gap-4\">\n            {authLoading ? (\n              <div className=\"h-6 w-6 animate-pulse rounded-full bg-gray-200\" />\n            ) : isLoggedIn && user ? (\n              <>\n                <span className=\"text-sm font-medium\">\n                  {user.username}님\n                </span>\n                <Button size=\"sm\" onClick={logout}>\n                  로그아웃\n                </Button>\n                <Button variant=\"ghost\" size=\"icon\" asChild>\n                  <Link href=\"/profile\">\n                    <User className=\"h-5 w-5\" />\n                    <span className=\"sr-only\">프로필</span>\n                  </Link>\n                </Button>\n              </>\n            ) : (\n              <>\n                <Button variant=\"outline\" size=\"sm\" asChild>\n                  <Link href=\"/login\">로그인</Link>\n                </Button>\n                <Button size=\"sm\" asChild>\n                  <Link href=\"/register\">회원가입</Link>\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n",
            "theme-provider.tsx": "\"use client\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\nimport type { ThemeProviderProps } from \"next-themes\"\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n\n",
            "theme-toggle.tsx": "\"use client\"\n\nimport { Moon, Sun } from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\n\nexport function ThemeToggle() {\n  const { setTheme } = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">테마 변경</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")}>라이트</DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")}>다크</DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")}>시스템</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n\n"
        },
        "ui": {
            "__files__": {
                "alert.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
                "avatar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
                "badge.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
                "button.tsx": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
                "card.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
                "checkbox.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
                "dialog.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
                "dropdown-menu.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
                "input.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
                "label.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
                "pagination.tsx": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n",
                "select.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
                "separator.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
                "sheet.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
                "table.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
                "tabs.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
                "textarea.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"
            }
        }
    },
    "context": {
        "__files__": {
            "AuthContext.tsx": "\"use client\";\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\n\ninterface AuthUser {\n  id: number;\n  username: string;\n}\n\ninterface AuthContextType {\n  isLoggedIn: boolean;\n  token: string | null;\n  user: AuthUser | null;\n  authLoading: boolean;\n  login: (token: string, user: AuthUser) => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  isLoggedIn: false,\n  token: null,\n  user: null,\n  authLoading: true,\n  login: () => {},\n  logout: () => {},\n});\n\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n  const [token, setToken] = useState<string | null>(null);\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const [authLoading, setAuthLoading] = useState(true);\n  const router = useRouter();\n\n  useEffect(() => {\n    // 페이지 마운트 시 localStorage에서 토큰과 사용자 정보를 확인\n    const storedToken = localStorage.getItem(\"token\");\n    const storedUser = localStorage.getItem(\"user\");\n    \n    if (storedToken && storedToken !== \"undefined\") {\n      setToken(storedToken);\n    }\n    if (storedUser && storedUser !== \"undefined\") {\n      try {\n        const parsedUser = JSON.parse(storedUser) as AuthUser;\n        setUser(parsedUser);\n      } catch (error) {\n        console.error(\"Error parsing user from localStorage:\", error);\n      }\n    }\n    setAuthLoading(false);\n  }, []);\n\n  const login = (token: string, user: AuthUser) => {\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"user\", JSON.stringify(user));\n    setToken(token);\n    setUser(user);\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    setToken(null);\n    setUser(null);\n    router.push(\"/login\");\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{ isLoggedIn: !!token, token, user, authLoading, login, logout }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"
        }
    },
    "utils": {
        "__files__": {
            "api.tsx": "const API_BASE_URL = \"http://localhost:8080/api\"; // 필요 시 IP/포트를 수정하세요.\n\nexport async function login(username: string, password: string) {\n  const res = await fetch(`${API_BASE_URL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ username, password }),\n  });\n  if (!res.ok) {\n    const errorMessage = await res.text();\n    throw new Error(errorMessage);\n  }\n  return res.json();\n}\n\nexport async function register(user: { email: string; username: string; password: string }) {\n  const res = await fetch(`${API_BASE_URL}/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(user),\n  });\n  if (!res.ok) {\n    const errorMessage = await res.text();\n    throw new Error(errorMessage);\n  }\n  return res.json();\n}\n\nexport async function fetchSwNotices() {\n  const res = await fetch(`${API_BASE_URL}/sw-notices`);\n  if (!res.ok) {\n    throw new Error(\"Failed to fetch SW notices\");\n  }\n  return res.json();\n}\n\nexport async function fetchItContestSites() {\n  const res = await fetch(`${API_BASE_URL}/it-contest-sites`);\n  if (!res.ok) {\n    throw new Error(\"Failed to fetch IT contest sites\");\n  }\n  return res.json();\n}\n\nexport async function fetchInternshipInfos() {\n  const res = await fetch(`${API_BASE_URL}/internship-infos`);\n  if (!res.ok) {\n    throw new Error(\"Failed to fetch internship infos\");\n  }\n  return res.json();\n}\n\nexport async function fetchPosts() {\n  const res = await fetch(`${API_BASE_URL}/posts`);\n  if (!res.ok) {\n    throw new Error(\"Failed to fetch posts\");\n  }\n  return res.json();\n}\n\nexport async function fetchJobPostings() {\n  const res = await fetch(`${API_BASE_URL}/job-postings`);\n  if (!res.ok) {\n    throw new Error(\"Failed to fetch job postings\");\n  }\n  return res.json();\n}\n\nexport async function fetchPostById(postId: string) {\n  const res = await fetch(`${API_BASE_URL}/posts/${postId}`);\n  if (!res.ok) {\n    throw new Error(\"Failed to fetch post details\");\n  }\n  return res.json();\n}\n\nexport async function likePost(postId: string, token: string) {\n  const res = await fetch(`${API_BASE_URL}/posts/${postId}/like`, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${token}`,\n    },\n  });\n  if (!res.ok) {\n    throw new Error(\"Failed to like post\");\n  }\n  return res.json();\n}\n\nexport async function addComment(\n  postId: string,\n  comment: { content: string; authorId: number }, \n  token: string\n) {\n  const res = await fetch(`${API_BASE_URL}/posts/${postId}/comments`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`,\n    },\n    body: JSON.stringify(comment),\n  });\n  if (!res.ok) {\n    throw new Error(\"Failed to add comment\");\n  }\n  return res.json();\n}\n\nexport async function createPost(\n  post: { title: string; content: string; category: string },\n  token: string\n) {\n  const res = await fetch(`${API_BASE_URL}/posts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`,\n    },\n    body: JSON.stringify(post),\n  });\n  if (!res.ok) {\n    const errorMessage = await res.text();\n    throw new Error(errorMessage);\n  }\n  return res.json();\n}\n"
        }
    }
}